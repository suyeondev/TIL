CREATE TABLE    TEST_TBL(
    ID      NUMBER(5)       PRIMARY KEY,
    NAME    VARCHAR2(50)    NOT NULL,
    ADDRESS VARCHAR2(100) ,
    REGDATE DATE DEFAULT SYSDATE
);

SELECT *
FROM    TEST_TBL;

DROP TABLE TEST_TBL;

INSERT INTO TEST_TBL VALUES(100,'JSLIM', NULL, NULL);
INSERT INTO TEST_TBL (ID, NAME, ADDRESS) VALUES(200,'JSLIM', NULL);

CREATE TABLE TEST_PARENT(
    DEPT_ID     NUMBER(5)   PRIMARY KEY ,
    DEPT_NAME   VARCHAR(50) DEFAULT '아무개' 
);

INSERT  INTO TEST_PARENT    VALUES(10,'섭섭해');
INSERT  INTO TEST_PARENT    VALUES(20,'임섭순');
INSERT  INTO TEST_PARENT(DEPT_ID)   VALUES(30);

CREATE TABLE TEST_CHILD(
    EMP_ID      NUMBER(5)   PRIMARY KEY ,
    DEPT_ID     NUMBER(5)   REFERENCES TEST_PARENT(DEPT_ID),
    SALARY      NUMBER(10)  CHECK (SALARY > 0)

);

INSERT INTO TEST_CHILD VALUES(100, NULL , 1000000);



SELECT *
FROM    TEST_PARENT2;

SELECT *
FROM    TEST_CHILD2;


CREATE TABLE TEST_PARENT2(
    DEPT_ID     NUMBER(5) ,
    DEPT_NAME   VARCHAR(50) ,
    PRIMARY KEY(DEPT_ID, DEPT_NAME)
);
INSERT INTO TEST_PARENT2 VALUES(10, '섭섭해');
INSERT INTO TEST_PARENT2 VALUES(10, '임섭순');

CREATE TABLE    TEST_CHILD2(
    EMP_ID  NUMBER(5)   PRIMARY KEY ,
    DEPT_ID     NUMBER(5),
    DEPT_NAME   VARCHAR(50) ,
    SALARY      NUMBER(10)  CHECK( SALARY > 0),
    FOREIGN KEY( DEPT_ID , DEPT_NAME) REFERENCES TEST_PARENT2(DEPT_ID , DEPT_NAME)
);
INSERT INTO TEST_CHILD2 VALUES(100,'10','섭섭해',1000);

CREATE TABLE    TEST_CHILD3(
    EMP_ID  NUMBER(5) ,
    DEPT_ID     NUMBER(5),
    DEPT_NAME   VARCHAR(50) ,
    SALARY      NUMBER(10)  CHECK( SALARY > 0),
    FOREIGN KEY( DEPT_ID , DEPT_NAME) REFERENCES TEST_PARENT2(DEPT_ID , DEPT_NAME),
    PRIMARY KEY( EMP_ID,DEPT_ID , DEPT_NAME) 
);

INSERT INTO TEST_CHILD3 VALUES (100, '10', '임섭순', 1000);
INSERT INTO TEST_CHILD3 VALUES (200, '10', '임섭순', 1000);

SELECT *
FROM    TEST_CHILD3;


CREATE TABLE TEST_SUBQUERY2(ID, NAME, BONUS)
AS SELECT   EMP_ID , EMP_NAME, NVL(BONUS_PCT,0)
    FROM    EMPLOYEE ;
    
SELECT   *
FROM     TEST_SUBQUERY2;
    
    
CREATE OR REPLACE VIEW HIREDDATE20
AS      SELECT  HIRE_DATE ,
                TRUNC(MONTHS_BETWEEN(SYSDATE , HIRE_DATE) / 12) AS 근속년수     
        FROM    EMPLOYEE 
        WHERE   MONTHS_BETWEEN(SYSDATE , HIRE_DATE) > 240 ;
        
SELECT  *
FROM    HIREDDATE20;

DROP VIEW HIREDDATE20;

--부서별 평균 급여보다 많은 급여를 받는 직원의 이름, 급여를 조회한다면?
SELECT  ROWNUM ,
        EMP_NAME,
        SALARY
FROM    (SELECT  EMP_NAME,
                 SALARY
         FROM   (SELECT  DEPT_ID AS DID,
                         ROUND(AVG(SALARY) , -3) AS DAVG
                 FROM    EMPLOYEE
                 GROUP BY    DEPT_ID) V
         JOIN    EMPLOYEE E ON(E.DEPT_ID = V.DID)
         WHERE   SALARY > V.DAVG
         ORDER BY 2 DESC)
WHERE    ROWNUM <= 5;
         





-- 실습
--1
CREATE TABLE CUSTOMERS(
    CNO     NUMBER(5)       PRIMARY KEY,
    CNAME   VARCHAR2(10)    NOT NULL,
    ADDRESS VARCHAR2(50)    NOT NULL,
    EMAIL   VARCHAR2(20)    NOT NULL,
    PHONE   VARCHAR2(20)    NOT NULL
);

CREATE TABLE ORDERS(
    ORDERNO     NUMBER(10)  PRIMARY KEY,
    ORDERDATE   DATE    DEFAULT SYSDATE NOT NULL,
    ADDRESS     VARCHAR2(50)    NOT NULL,
    PHONE       VARCHAR2(20)    NOT NULL,
    STATUS      VARCHAR2(20)    CHECK(STATUS IN ('결제완료','배송중','배송완료')) NOT NULL,
    CNO         NUMBER(5) REFERENCES CUSTOMERS(CNO) NOT NULL  
);

CREATE TABLE PRODUCTS(
    PNO     NUMBER(5)       PRIMARY KEY,
    PNAME   VARCHAR2(20)    NOT NULL,
    COST    NUMBER(8)       DEFAULT 0 NOT NULL,
    STOCK   NUMBER(5)       DEFAULT 0 NOT NULL
);


CREATE TABLE ORDERDETAIL(
    ORDERNO     NUMBER(10)  REFERENCES ORDERS(ORDERNO),
    PNO         NUMBER(5)   REFERENCES PRODUCTS(PNO),
    QTY         NUMBER(5)   DEFAULT 0 ,
    COST        NUMBER(8)   DEFAULT 0,
    PRIMARY KEY (ORDERNO, PNO)

);
--2
INSERT INTO PRODUCTS VALUES(1001, '삼양라면', 1000, 200);
INSERT INTO PRODUCTS VALUES(1002, '새우깡', 1500, 500);
INSERT INTO PRODUCTS VALUES(1003, '월드콘', 2000, 350);
INSERT INTO PRODUCTS VALUES(1004, '빼빼로', 2000, 700);
INSERT INTO PRODUCTS VALUES(1005, '코카콜라', 1800, 550);
INSERT INTO PRODUCTS VALUES(1006, '환타', 1600, 300);
--3
INSERT INTO CUSTOMERS VALUES(101,'김철수','서울 강남구','cskim@naver.com','889-6666');
INSERT INTO CUSTOMERS VALUES(102,'이영희','부산 서면','yhlee@empal.com','355-8882');
INSERT INTO CUSTOMERS VALUES(103,'최진국','제주 동광양','jkchoi@gmail.com','852-5764');
INSERT INTO CUSTOMERS VALUES(104,'강준호','강릉 홍제동','jhkang@hanmail.com','559-7777');
INSERT INTO CUSTOMERS VALUES(105,'민병국','대전 전민동','bgmin@hotmail.com','559-8741');
INSERT INTO CUSTOMERS VALUES(106,'오민수','광주 북구','msoh@microsoft.com','542-9988');

SELECT * FROM   PRODUCTS;

--4
INSERT INTO ORDERS(ORDERNO,ADDRESS,PHONE,STATUS,CNO) 
VALUES(1,'서울 강남구','889-6666','결제완료',101 );
UPDATE  ORDERS
SET     ORDERDATE = SYSDATE-3
WHERE   ORDERNO =1;

INSERT  INTO ORDERDETAIL VALUES (1,(SELECT PNO FROM PRODUCTS WHERE PNAME = '삼양라면'),50,1000);

SELECT * FROM   ORDERDETAIL;

--5
UPDATE PRODUCTS
SET STOCK = STOCK -(SELECT QTY
            FROM    ORDERDETAIL)
WHERE   PNO = 1001;

--6
INSERT INTO ORDERS VALUES(2,SYSDATE-2,'부산 수영구', '337-5000','결제완료',(SELECT CNO FROM CUSTOMERS WHERE CNAME = '이영희'));           
            
INSERT INTO ORDERDETAIL VALUES (2,(SELECT PNO FROM PRODUCTS WHERE PNAME ='새우깡'),150,2000);
INSERT INTO ORDERDETAIL VALUES (2,(SELECT PNO FROM PRODUCTS WHERE PNAME ='월드콘'),150,2000);
UPDATE ORDERDETAIL SET QTY = 100 WHERE PNO = (SELECT PNO FROM PRODUCTS WHERE PNAME ='새우깡');
UPDATE ORDERDETAIL SET COST = 1500 WHERE PNO = (SELECT PNO FROM PRODUCTS WHERE PNAME ='새우깡');

SELECT * FROM ORDERDETAIL;
--7
UPDATE PRODUCTS
SET STOCK = STOCK -(SELECT QTY
            FROM    ORDERDETAIL
            WHERE   PNO = 1002)
WHERE PNO = 1002;

UPDATE PRODUCTS
SET STOCK = STOCK -(SELECT QTY
            FROM    ORDERDETAIL
            WHERE   PNO = 1003)
WHERE PNO = 1003;

SELECT * FROM PRODUCTS;
SELECT * FROM ORDERS;
--8
INSERT INTO ORDERS VALUES(3,SYSDATE-3,'광주 북구','652-2277','결제완료',(SELECT CNO FROM CUSTOMERS WHERE CNAME ='오민수'));
UPDATE ORDERS SET ORDERDATE = SYSDATE-1 WHERE ORDERNO = 3;
INSERT INTO ORDERDETAIL VALUES(3,(SELECT PNO FROM PRODUCTS WHERE PNAME ='빼빼로'),100,2000);
INSERT INTO ORDERDETAIL VALUES(3,(SELECT PNO FROM PRODUCTS WHERE PNAME ='코카콜라'),50,1800);

SELECT * FROM ORDERDETAIL;
--9
UPDATE PRODUCTS
SET STOCK = STOCK -(SELECT QTY
            FROM    ORDERDETAIL
            WHERE   PNO = 1004)
WHERE PNO = 1004;

UPDATE PRODUCTS
SET STOCK = STOCK -(SELECT QTY
            FROM    ORDERDETAIL
            WHERE   PNO = 1005)
WHERE PNO = 1005;

--10
SELECT  O.ORDERDATE, 
        C.CNAME,
        O.ADDRESS, 
        O.PHONE,
        O.STATUS,
        P.PNAME,
        P.COST,
        OD.QTY,
        OD.COST*OD.QTY
FROM    ORDERS      O
JOIN    CUSTOMERS   C ON (O.CNO = C.CNO)
JOIN    ORDERDETAIL OD ON(O.ORDERNO = OD.ORDERNO)
JOIN    PRODUCTS    P ON(P.PNO = OD.PNO) 


SELECT * FROM ORDERS;
--11
SELECT  ORDERDATE,
        SUM(COST*QTY)
FROM    ORDERDETAIL
JOIN    ORDERS USING(ORDERNO)
GROUP BY    ORDERDATE, SUBSTR(ORDERDATE,4,2);

--12
INSERT INTO PRODUCTS VALUES(1007, '목캔디', 3000,500);

--13
INSERT INTO ORDERS VALUES(4,SYSDATE,'제주 동광양','352-4657','결제완료',(SELECT CNO FROM CUSTOMERS WHERE CNAME = '최진국'));
INSERT INTO ORDERDETAIL VALUES(4,1007,200,3000);
UPDATE PRODUCTS
SET STOCK = STOCK -(SELECT QTY
            FROM    ORDERDETAIL
            WHERE   PNO = 1007)
WHERE PNO = 1007;

SELECT  O.ORDERDATE, 
        C.CNAME,
        O.ADDRESS, 
        O.PHONE,
        O.STATUS,
        P.PNAME,
        P.COST,
        OD.QTY,
        OD.COST*OD.QTY
FROM    ORDERS      O
JOIN    CUSTOMERS   C ON (O.CNO = C.CNO)
JOIN    ORDERDETAIL OD ON(O.ORDERNO = OD.ORDERNO)
JOIN    PRODUCTS    P ON(P.PNO = OD.PNO) ;
